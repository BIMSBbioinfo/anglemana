// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// computePValues
void computePValues(arma::mat& cor_mat, int df);
RcppExport SEXP _anglemania_computePValues(SEXP cor_matSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type cor_mat(cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    computePValues(cor_mat, df);
    return R_NilValue;
END_RCPP
}
// dist2mat
NumericMatrix dist2mat(NumericVector& x, int bf);
RcppExport SEXP _anglemania_dist2mat(SEXP xSEXP, SEXP bfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bf(bfSEXP);
    rcpp_result_gen = Rcpp::wrap(dist2mat(x, bf));
    return rcpp_result_gen;
END_RCPP
}
// matrixAddition
arma::sp_mat matrixAddition(arma::sp_mat A, arma::sp_mat B);
RcppExport SEXP _anglemania_matrixAddition(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixAddition(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_anglemania_computePValues", (DL_FUNC) &_anglemania_computePValues, 2},
    {"_anglemania_dist2mat", (DL_FUNC) &_anglemania_dist2mat, 2},
    {"_anglemania_matrixAddition", (DL_FUNC) &_anglemania_matrixAddition, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_anglemania(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

[{"path":"http://bioinformatics.mdc-berlin.de/anglemania/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Artistic License 2.0","title":"Artistic License 2.0","text":"Copyright (c) 2024, anglemania authors Everyone permitted copy distribute verbatim copies license document, changing allowed. Preamble ******** license establishes terms given free software Package may copied, modified, distributed, /redistributed. intent Copyright Holder maintains artistic control development Package still keeping Package available open source free software. always permitted make arrangements wholly outside license directly Copyright Holder given Package. terms license permit full use propose make Package, contact Copyright Holder seek different licensing arrangement. Definitions *********** “Copyright Holder” means individual(s) organization(s) named copyright notice entire Package. “Contributor” means party contributed code material Package, accordance Copyright Holder’s procedures. “” “” means person like copy, distribute, modify Package. “Package” means collection files distributed Copyright Holder, derivatives collection /files. given Package may consist either Standard Version, Modified Version. “Distribute” means providing copy Package making accessible anyone else, case company organization, others outside company organization. “Distributor Fee” means fee charge Distributing Package providing support Package another party. mean licensing fees. “Standard Version” refers Package modified, modified ways explicitly requested Copyright Holder. “Modified Version” means Package, changed, changes explicitly requested Copyright Holder. “Original License” means Artistic License Distributed Standard Version Package, current version may modified Perl Foundation future. “Source” form means source code, documentation source, configuration files Package. “Compiled” form means compiled bytecode, object code, binary, form resulting mechanical transformation translation Source form. Permission Use Modification Without Distribution ******************************************************** permitted use Standard Version create use Modified Versions purpose without restriction, provided Distribute Modified Version. Permissions Redistribution Standard Version ****************************************************** may Distribute verbatim copies Source form Standard Version Package medium without restriction, either gratis Distributor Fee, provided duplicate original copyright notices associated disclaimers. discretion, verbatim copies may may include Compiled form Package. may apply bug fixes, portability changes, modifications made available Copyright Holder. resulting Package still considered Standard Version, subject Original License. Distribution Modified Versions Package Source ********************************************************** may Distribute Modified Version Source (either gratis Distributor Fee, without Compiled form Modified Version) provided clearly document differs Standard Version, including, limited , documenting non-standard features, executables, modules, provided least ONE following: make Modified Version available Copyright Holder Standard Version, Original License, Copyright Holder may include modifications Standard Version. ensure installation Modified Version prevent user installing running Standard Version. addition, Modified Version must bear name different name Standard Version. allow anyone receives copy Modified Version make Source form Modified Version available others Original License license permits licensee freely copy, modify redistribute Modified Version using licensing terms apply copy licensee received, requires Source form Modified Version, works derived , made freely available license fees prohibited Distributor Fees allowed. Distribution Compiled Forms Standard Version Modified ****************************************************************** Versions without Source *************************** may Distribute Compiled forms Standard Version without Source, provided include complete instructions get Source Standard Version. instructions must valid time distribution. instructions, time carrying distribution, become invalid, must provide new instructions demand cease distribution. provide valid instructions cease distribution within thirty days become aware instructions invalid, forfeit rights license. may Distribute Modified Version Compiled form without Source, provided comply Section 4 respect Source Modified Version. Aggregating Linking Package ********************************** may aggregate Package (either Standard Version Modified Version) packages Distribute resulting aggregation provided charge licensing fee Package. Distributor Fees permitted, licensing fees components aggregation permitted. terms license apply use Distribution Standard Modified Versions included aggregation. permitted link Modified Standard Versions works, embed Package larger work , build stand-alone binary bytecode versions applications include Package, Distribute result without restriction, provided result expose direct interface Package. Items Considered Part Modified Version ******************************************************** Works (including, limited , modules scripts) merely extend make use Package, , , cause Package Modified Version. addition, works considered parts Package , subject terms license. General Provisions ****************** use, modification, distribution Standard Modified Versions governed Artistic License. using, modifying distributing Package, accept license. use, modify, distribute Package, accept license. Modified Version derived Modified Version made someone , nevertheless required ensure Modified Version complies requirements license. license grant right use trademark, service mark, tradename, logo Copyright Holder. license includes non-exclusive, worldwide, free--charge patent license make, made, use, offer sell, sell, import otherwise transfer Package respect patent claims licensable Copyright Holder necessarily infringed Package. institute patent litigation (including cross-claim counterclaim) party alleging Package constitutes direct contributory patent infringement, Artistic License shall terminate date litigation filed. Disclaimer Warranty: PACKAGE PROVIDED COPYRIGHT HOLDER CONTRIBUTORS “’ WITHOUT EXPRESS IMPLIED WARRANTIES. IMPLIED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE, NON-INFRINGEMENT DISCLAIMED EXTENT PERMITTED LOCAL LAW. UNLESS REQUIRED LAW, COPYRIGHT HOLDER CONTRIBUTOR LIABLE DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL DAMAGES ARISING WAY USE PACKAGE, EVEN ADVISED POSSIBILITY DAMAGE.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"create-simulated-data","dir":"Articles","previous_headings":"","what":"Create simulated data","title":"anglemania_tutorial","text":"","code":"batch.facLoc <- 0.4 de.facLoc <- 0.1 nBatches <- 4 nGroups <- 3 nGenes <- 5000 groupCells <- 800  sim <- splatSimulate(     batchCells = rep(300 * nGroups, nBatches),     batch.facLoc = batch.facLoc,     group.prob = rep(1/nGroups, nGroups),     nGenes = nGenes,     batch.facScale = 0.1,     method = \"groups\",     verbose = FALSE,     out.prob    = 0.001,     de.prob     = 0.1, # mild      de.facLoc   = de.facLoc,     de.facScale = 0.1,     bcv.common  = 0.1 )  se <- CreateSeuratObject(counts = counts(sim), meta.data = as.data.frame(colData(sim))) ## Warning: Data is of class matrix. Coercing to dgCMatrix. rm(sim) se ## An object of class Seurat  ## 5000 features across 3600 samples within 1 assay  ## Active assay: RNA (5000 features, 0 variable features) ##  1 layer present: counts head(se[[]]) ##          orig.ident nCount_RNA nFeature_RNA  Cell  Batch  Group ExpLibSize ## Cell1 SeuratProject      81008         4004 Cell1 Batch1 Group2   80853.00 ## Cell2 SeuratProject      43335         3625 Cell2 Batch1 Group3   43357.87 ## Cell3 SeuratProject      61149         3859 Cell3 Batch1 Group2   61126.45 ## Cell4 SeuratProject      53996         3763 Cell4 Batch1 Group1   53628.79 ## Cell5 SeuratProject      66404         3881 Cell5 Batch1 Group1   65474.87 ## Cell6 SeuratProject      57973         3842 Cell6 Batch1 Group3   57751.74"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"unintegrated-data","dir":"Articles","previous_headings":"","what":"unintegrated data","title":"anglemania_tutorial","text":"","code":"se_unintegrated <- se suppressWarnings({   se_unintegrated <- se_unintegrated %>%   NormalizeData() %>%   FindVariableFeatures() %>%   ScaleData() %>%   RunPCA() %>%   RunUMAP(dims = 1:30, verbose = FALSE) }) ## Normalizing layer: counts ## Finding variable features for layer counts ## Centering and scaling data matrix ## PC_ 1  ## Positive:  Gene4998, Gene1851, Gene1858, Gene1769, Gene4167, Gene4359, Gene3114, Gene1392, Gene906, Gene2555  ##     Gene1186, Gene2855, Gene4451, Gene329, Gene2316, Gene2668, Gene1276, Gene1192, Gene946, Gene3822  ##     Gene35, Gene3183, Gene3668, Gene4055, Gene3778, Gene2967, Gene3604, Gene1666, Gene80, Gene2950  ## Negative:  Gene1778, Gene4947, Gene3361, Gene2804, Gene3191, Gene3939, Gene3248, Gene2846, Gene4023, Gene2954  ##     Gene670, Gene1749, Gene1520, Gene2384, Gene543, Gene2777, Gene4148, Gene2684, Gene4012, Gene2408  ##     Gene4822, Gene805, Gene4522, Gene4760, Gene475, Gene4756, Gene4161, Gene4226, Gene2347, Gene736  ## PC_ 2  ## Positive:  Gene4898, Gene3827, Gene2969, Gene4182, Gene4812, Gene4914, Gene4247, Gene950, Gene811, Gene280  ##     Gene4844, Gene1746, Gene3652, Gene3144, Gene4773, Gene4852, Gene1929, Gene1021, Gene2554, Gene3403  ##     Gene1268, Gene254, Gene915, Gene938, Gene2843, Gene4489, Gene709, Gene4074, Gene4667, Gene2103  ## Negative:  Gene4768, Gene2483, Gene2444, Gene1171, Gene448, Gene575, Gene3564, Gene2433, Gene351, Gene912  ##     Gene1870, Gene3060, Gene2568, Gene4128, Gene1786, Gene2891, Gene4209, Gene4637, Gene297, Gene2010  ##     Gene787, Gene492, Gene3687, Gene4718, Gene3262, Gene1657, Gene1493, Gene2031, Gene4101, Gene4740  ## PC_ 3  ## Positive:  Gene267, Gene1099, Gene1610, Gene505, Gene471, Gene4737, Gene4440, Gene4515, Gene4485, Gene3812  ##     Gene2434, Gene1179, Gene2501, Gene3619, Gene4586, Gene4343, Gene4125, Gene4879, Gene3772, Gene4654  ##     Gene3567, Gene3889, Gene1562, Gene19, Gene3077, Gene4830, Gene2132, Gene3466, Gene3294, Gene4287  ## Negative:  Gene463, Gene3025, Gene2894, Gene444, Gene840, Gene95, Gene816, Gene4617, Gene3813, Gene4709  ##     Gene101, Gene1699, Gene3385, Gene3369, Gene2122, Gene4376, Gene1006, Gene1685, Gene3846, Gene4490  ##     Gene1590, Gene2521, Gene4858, Gene4463, Gene2239, Gene274, Gene4673, Gene289, Gene3068, Gene3290  ## PC_ 4  ## Positive:  Gene1312, Gene4793, Gene1488, Gene2650, Gene389, Gene1558, Gene1133, Gene793, Gene4895, Gene1582  ##     Gene4231, Gene4586, Gene1782, Gene3570, Gene471, Gene554, Gene463, Gene2214, Gene1147, Gene2496  ##     Gene3077, Gene4490, Gene2761, Gene3462, Gene3141, Gene2312, Gene3827, Gene9, Gene533, Gene4890  ## Negative:  Gene345, Gene361, Gene670, Gene470, Gene4238, Gene4869, Gene2382, Gene4738, Gene4661, Gene816  ##     Gene645, Gene2552, Gene2521, Gene128, Gene2842, Gene23, Gene4363, Gene4445, Gene2245, Gene1340  ##     Gene3183, Gene1464, Gene1843, Gene3168, Gene564, Gene1419, Gene280, Gene4215, Gene4205, Gene2573  ## PC_ 5  ## Positive:  Gene816, Gene4403, Gene3168, Gene4299, Gene4969, Gene1651, Gene3618, Gene2512, Gene4616, Gene1419  ##     Gene4350, Gene777, Gene4388, Gene634, Gene2354, Gene4509, Gene4231, Gene35, Gene3992, Gene2842  ##     Gene2936, Gene2282, Gene3846, Gene4982, Gene1236, Gene3676, Gene1768, Gene350, Gene2434, Gene1659  ## Negative:  Gene4586, Gene1851, Gene4797, Gene265, Gene4014, Gene920, Gene4574, Gene3377, Gene3570, Gene3141  ##     Gene2985, Gene2687, Gene3077, Gene1052, Gene3567, Gene463, Gene584, Gene3328, Gene2860, Gene4407  ##     Gene3493, Gene3228, Gene1647, Gene1160, Gene337, Gene1312, Gene1921, Gene3462, Gene3564, Gene4065 DimPlot(se_unintegrated, reduction = \"umap\", group.by = \"Batch\") DimPlot(se_unintegrated, reduction = \"umap\", group.by = \"Group\")"},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"create-anglem-object","dir":"Articles","previous_headings":"run anglemania","what":"create anglem object","title":"anglemania_tutorial","text":"","code":"head(se[[]]) ##          orig.ident nCount_RNA nFeature_RNA  Cell  Batch  Group ExpLibSize ## Cell1 SeuratProject      81008         4004 Cell1 Batch1 Group2   80853.00 ## Cell2 SeuratProject      43335         3625 Cell2 Batch1 Group3   43357.87 ## Cell3 SeuratProject      61149         3859 Cell3 Batch1 Group2   61126.45 ## Cell4 SeuratProject      53996         3763 Cell4 Batch1 Group1   53628.79 ## Cell5 SeuratProject      66404         3881 Cell5 Batch1 Group1   65474.87 ## Cell6 SeuratProject      57973         3842 Cell6 Batch1 Group3   57751.74 batch_key <- \"Batch\"  angl <- create_anglemania_object(se,   batch_key = batch_key,   min_cells_per_gene = 1 ) ## No dataset_key specified. ## Assuming that all samples belong to the same dataset and are separated by batch_key: Batch ## Extracting count matrices... ## Filtering each batch to at least 1 cells per gene... ## Using the intersection of filtered genes from all batches... ## Number of genes in intersected set: 4958 angl ## anglemania_object ## -------------- ## Dataset key: NA  ## Batch key: Batch  ## Number of datasets: 1  ## Total number of batches: 4  ## Batches (showing first 5): ## Batch1, Batch2, Batch3, Batch4  ## Number of intersected genes: 4958  ## Intersected genes (showing first 10): ## Gene1, Gene2, Gene3, Gene4, Gene5, Gene6, Gene7, Gene8, Gene9, Gene10 , ... ## Min cells per gene: 1"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"run-anglemania-1","dir":"Articles","previous_headings":"run anglemania","what":"run anglemania","title":"anglemania_tutorial","text":"","code":"angl <- anglemania(angl,   zscore_mean_threshold = 2,   zscore_sn_threshold = 2,   max_n_genes = 2000 # optionally define a max number of genes. default is 2000 ) ## Computing angles and transforming to z-scores... ## Computing statistics... ## Weighting matrix_list... ## Calculating mean... ## Calculating sds... ## Filtering features... angl <- select_genes(angl,                      zscore_mean_threshold = 2.5,                      zscore_sn_threshold = 2.5) # Inspect the anglemania genes integration_genes <- get_anglemania_genes(angl) head(integration_genes) ## [1] \"Gene816\"  \"Gene4124\" \"Gene4586\" \"Gene4679\" \"Gene1921\" \"Gene680\" length(integration_genes) ## [1] 291"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"integration","dir":"Articles","previous_headings":"run anglemania","what":"integration","title":"anglemania_tutorial","text":"implemented easy--use integrate_by_features() function anglemania package uses Seurat CCA integration can also just use anglemania genes integration algorithms","code":"# if the Seurat FindIntegrationAnchors() function does not work, # change this to the specified size: options(future.globals.maxSize = 4000 * 1024^2) suppressWarnings({   seurat_integrated_angl <- integrate_by_features(se,     angl,     process = TRUE   ) }) ## Log normalizing data... ## Finding integration anchors... ## Integrating samples... ## Running PCA with 30 PCs ## Running UMAP with 30 PCs and 30 neighbors seurat_integrated_angl ## An object of class Seurat  ## 5291 features across 3600 samples within 2 assays  ## Active assay: integrated (291 features, 291 variable features) ##  2 layers present: data, scale.data ##  1 other assay present: RNA ##  2 dimensional reductions calculated: pca, umap"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"plot-integration","dir":"Articles","previous_headings":"run anglemania","what":"plot integration","title":"anglemania_tutorial","text":"","code":"Seurat::DimPlot(seurat_integrated_angl, reduction = \"umap\", group.by = \"Batch\") Seurat::DimPlot(seurat_integrated_angl, reduction = \"umap\", group.by = \"Group\")"},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"get-hvgs","dir":"Articles","previous_headings":"Comparison to using HVGs","what":"get HVGs","title":"anglemania_tutorial","text":"","code":"se_list <- SplitObject(se, split.by = batch_key) se_list <- lapply(se_list, NormalizeData) ## Normalizing layer: counts ## Normalizing layer: counts ## Normalizing layer: counts ## Normalizing layer: counts # anglemania chose only 291 genes based on the thresholds #   to make it comparable we only choose 300 highly variable genes: hvg_features <- Seurat::SelectIntegrationFeatures(se_list, nfeatures = 300) ## No variable features found for object1 in the object.list. Running FindVariableFeatures ... ## Finding variable features for layer counts ## No variable features found for object2 in the object.list. Running FindVariableFeatures ... ## Finding variable features for layer counts ## No variable features found for object3 in the object.list. Running FindVariableFeatures ... ## Finding variable features for layer counts ## No variable features found for object4 in the object.list. Running FindVariableFeatures ... ## Finding variable features for layer counts"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"integration-1","dir":"Articles","previous_headings":"Comparison to using HVGs","what":"integration","title":"anglemania_tutorial","text":"","code":"suppressWarnings({   seurat_integrated_hvg <- integrate_seurat_list(se_list,     features = hvg_features,     process = TRUE   ) }) ## Log normalizing data... ## Finding integration anchors... ## Integrating samples... ## Running PCA with 30 PCs ## Running UMAP with 30 PCs and 30 neighbors seurat_integrated_hvg ## An object of class Seurat  ## 5300 features across 3600 samples within 2 assays  ## Active assay: integrated (300 features, 300 variable features) ##  2 layers present: data, scale.data ##  1 other assay present: RNA ##  2 dimensional reductions calculated: pca, umap"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/articles/anglemania_tutorial.html","id":"plot-integration-1","dir":"Articles","previous_headings":"Comparison to using HVGs","what":"plot integration","title":"anglemania_tutorial","text":"","code":"Seurat::DimPlot(seurat_integrated_hvg, reduction = \"umap\", group.by = \"Batch\") Seurat::DimPlot(seurat_integrated_hvg, reduction = \"umap\", group.by = \"Group\") sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] splatter_1.30.0             SingleCellExperiment_1.28.1 ##  [3] SummarizedExperiment_1.36.0 Biobase_2.66.0              ##  [5] GenomicRanges_1.58.0        GenomeInfoDb_1.42.0         ##  [7] IRanges_2.40.0              S4Vectors_0.44.0            ##  [9] BiocGenerics_0.52.0         MatrixGenerics_1.18.0       ## [11] matrixStats_1.4.1           Seurat_5.1.0                ## [13] SeuratObject_5.0.2          sp_2.1-4                    ## [15] dplyr_1.1.4                 anglemania_0.99.0           ##  ## loaded via a namespace (and not attached): ##   [1] RcppAnnoy_0.0.22        splines_4.4.2           later_1.3.2             ##   [4] tibble_3.2.1            polyclip_1.10-7         fastDummies_1.7.4       ##   [7] lifecycle_1.0.4         doParallel_1.0.17       globals_0.16.3          ##  [10] lattice_0.22-6          MASS_7.3-61             backports_1.5.0         ##  [13] magrittr_2.0.3          plotly_4.10.4           sass_0.4.9              ##  [16] rmarkdown_2.29          jquerylib_0.1.4         yaml_2.3.10             ##  [19] bigparallelr_0.3.2      httpuv_1.6.15           sctransform_0.4.1       ##  [22] spam_2.11-0             spatstat.sparse_3.1-0   reticulate_1.40.0       ##  [25] cowplot_1.1.3           pbapply_1.7-2           RColorBrewer_1.1-3      ##  [28] abind_1.4-8             zlibbioc_1.52.0         Rtsne_0.17              ##  [31] purrr_1.0.2             bigassertr_0.1.6        GenomeInfoDbData_1.2.13 ##  [34] ggrepel_0.9.6           irlba_2.3.5.1           listenv_0.9.1           ##  [37] spatstat.utils_3.1-1    goftest_1.2-3           RSpectra_0.16-2         ##  [40] spatstat.random_3.3-2   fitdistrplus_1.2-1      parallelly_1.39.0       ##  [43] pkgdown_2.1.1           leiden_0.4.3.1          codetools_0.2-20        ##  [46] DelayedArray_0.32.0     tidyselect_1.2.1        UCSC.utils_1.2.0        ##  [49] farver_2.1.2            bigstatsr_1.6.1         spatstat.explore_3.3-3  ##  [52] flock_0.7               jsonlite_1.8.9          progressr_0.15.1        ##  [55] ggridges_0.5.6          survival_3.7-0          iterators_1.0.14        ##  [58] systemfonts_1.1.0       foreach_1.5.2           tools_4.4.2             ##  [61] ragg_1.3.3              ica_1.0-3               Rcpp_1.0.13-1           ##  [64] glue_1.8.0              gridExtra_2.3           SparseArray_1.6.0       ##  [67] xfun_0.49               withr_3.0.2             fastmap_1.2.0           ##  [70] fansi_1.0.6             digest_0.6.37           R6_2.5.1                ##  [73] mime_0.12               textshaping_0.4.0       colorspace_2.1-1        ##  [76] scattermore_1.2         tensor_1.5              spatstat.data_3.1-4     ##  [79] utf8_1.2.4              tidyr_1.3.1             generics_0.1.3          ##  [82] data.table_1.16.2       httr_1.4.7              htmlwidgets_1.6.4       ##  [85] S4Arrays_1.6.0          uwot_0.2.2              pkgconfig_2.0.3         ##  [88] gtable_0.3.6            lmtest_0.9-40           XVector_0.46.0          ##  [91] htmltools_0.5.8.1       dotCall64_1.2           scales_1.3.0            ##  [94] png_0.1-8               spatstat.univar_3.1-1   knitr_1.49              ##  [97] reshape2_1.4.4          checkmate_2.3.2         nlme_3.1-166            ## [100] cachem_1.1.0            zoo_1.8-12              stringr_1.5.1           ## [103] rmio_0.4.0              KernSmooth_2.23-24      parallel_4.4.2          ## [106] miniUI_0.1.1.1          desc_1.4.3              pillar_1.9.0            ## [109] grid_4.4.2              vctrs_0.6.5             RANN_2.6.2              ## [112] promises_1.3.0          ff_4.5.0                xtable_1.8-4            ## [115] cluster_2.1.6           evaluate_1.0.1          cli_3.6.3               ## [118] locfit_1.5-9.10         compiler_4.4.2          rlang_1.1.4             ## [121] crayon_1.5.3            future.apply_1.11.3     labeling_0.4.3          ## [124] ps_1.8.1                plyr_1.8.9              fs_1.6.5                ## [127] stringi_1.8.4           viridisLite_0.4.2       deldir_2.0-4            ## [130] BiocParallel_1.40.0     munsell_0.5.1           lazyeval_0.2.2          ## [133] spatstat.geom_3.3-4     Matrix_1.7-1            RcppHNSW_0.6.0          ## [136] patchwork_1.3.0         future_1.34.0           ggplot2_3.5.1           ## [139] shiny_1.9.1             ROCR_1.0-11             igraph_2.1.1            ## [142] bslib_0.8.0             bit_4.5.0"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aaron Kollotzek. Author, maintainer. Vedran Franke. Author. Artem Baranovskii. Author. Altuna Akalin. Author.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kollotzek , Frank V, Baranovskii , Akalin (2024). “anglemania - Feature Extraction scRNA-seq Dataset Integration.”","code":"@Misc{,   title = {anglemania - Feature Extraction for scRNA-seq Dataset Integration},   author = {Aaron Kollotzek and Vedran Frank and Artem Baranovskii and Altuna Akalin},   year = {2024}, }"},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Feature Extraction for scRNA-seq Dataset Integration","text":"anglemania new approach integration scRNA-seq (, potentially, others sc-omics) similar biological entities. novelty, well cornerstone, proposed approach, use conservation angles gene pairs across assembly datasets integrated. anglemania extracts genes gene pairs exhibit invariant biologically meaningful relationships across different experiments. genes can subsequently used basis integration algorithms [Seurat CCA integration], [SCVI] others. Checkout [website].","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Extraction for scRNA-seq Dataset Integration","text":"can install anglemania Bioconductor using following commands: development version GitHub:","code":"# Install BiocManager if you haven't already if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # Install anglemania BiocManager::install(\"anglemania\") # Install devtools if you haven't already if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\")  # Install from GitHub devtools::install_github(\"BIMSBbioinfo/anglemania/\")"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Feature Extraction for scRNA-seq Dataset Integration","text":"Comprehensive documentation available [anglemania website] visit Bioconductor package page.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Feature Extraction for scRNA-seq Dataset Integration","text":"encounter issues questions: Submit issues GitHub Issues.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Feature Extraction for scRNA-seq Dataset Integration","text":"Artistic License/GPL","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Feature Extraction for scRNA-seq Dataset Integration","text":"use anglemania research, please cite: Aaron Kollotzek, Vedran Franke, Artem Baranovskii, Altuna Akalin(2024). *anglemania: Feature Extraction scRNA-seq Dataset Integration. R package version 0.99.0","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Critical Angles Between Genes Across Samples in an anglemania_object — anglemania","title":"Compute Critical Angles Between Genes Across Samples in an anglemania_object — anglemania","text":"anglemania computes critical angles genes across samples provided anglemania_object-class. calculates angles, transforms z-scores, computes statistical measures, selects genes based specified thresholds.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Critical Angles Between Genes Across Samples in an anglemania_object — anglemania","text":"","code":"anglemania(   angl,   method = \"pearson\",   zscore_mean_threshold = 2.5,   zscore_sn_threshold = 2.5,   max_n_genes = 2000 )"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Critical Angles Between Genes Across Samples in an anglemania_object — anglemania","text":"angl anglemania_object-class containing gene expression data associated metadata. method Character string specifying method use calculating relationship gene pairs. Default \"pearson\". options include \"diem\" (see https://bytez.com/docs/arxiv/2407.08623/paper). zscore_mean_threshold Numeric value specifying threshold mean z-score. Default 2.5. zscore_sn_threshold Numeric value specifying threshold signal--noise z-score. Default 2.5. max_n_genes Integer specifying maximum number genes select. Default 2000.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Critical Angles Between Genes Across Samples in an anglemania_object — anglemania","text":"updated anglemania_object-class computed statistics selected genes based specified thresholds.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Critical Angles Between Genes Across Samples in an anglemania_object — anglemania","text":"function performs following steps: Computes angles genes sample angl using specified method, via factorise. Transforms angles z-scores. Computes statistical measures (mean z-score, signal--noise ratio) across samples using get_list_stats. Selects genes based specified z-score thresholds using select_genes. computed statistics selected genes added angl, returned.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Critical Angles Between Genes Across Samples in an anglemania_object — anglemania","text":"","code":"se <- SeuratObject::pbmc_small angl <- create_anglemania_object(se, batch_key = \"groups\") #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 angl <- anglemania(   angl,   method = \"pearson\",   zscore_mean_threshold = 2,   zscore_sn_threshold = 2,   max_n_genes = 2000 ) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features...  # Access the selected genes selected_genes <- get_anglemania_genes(angl) selected_genes[1:10] #>  [1] \"GNG11\"     \"CLU\"       \"SDPR\"      \"PF4\"       \"GP9\"       \"SPARC\"     #>  [7] \"PPBP\"      \"HIST1H2AC\" \"CD9\"       \"NRGN\""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-class.html","id":null,"dir":"Reference","previous_headings":"","what":"anglemania_object - Class for Storing and Processing Gene Expression Data — anglemania_object-class","title":"anglemania_object - Class for Storing and Processing Gene Expression Data — anglemania_object-class","text":"anglemania_object class designed construct correct input anglemania function Seurat object store results analysis. encapsulates data metadata required processing gene expression data across multiple datasets batches.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"anglemania_object - Class for Storing and Processing Gene Expression Data — anglemania_object-class","text":"object class 'anglemania_object'","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"anglemania_object - Class for Storing and Processing Gene Expression Data — anglemania_object-class","text":"matrix_list list FBM objects containing gene expression matrices batch. dataset_key character string indicating key used denote dataset metadata. batch_key character string indicating key used denote batch metadata. data_info data frame summarizing number samples per dataset weights. weights numeric vector weights dataset based number samples. list_stats list containing statistical measures computed across datasets. intersect_genes character vector genes expressed least specified number cells across batches. min_cells_per_gene numeric value indicating minimum number cells gene must expressed included analysis. integration_genes list containing information integration genes statistics.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"anglemania_object - Class for Storing and Processing Gene Expression Data — anglemania_object-class","text":"","code":"se <- SeuratObject::pbmc_small se[[]]$Dataset <- rep(c(\"A\", \"B\"), each = ncol(se) / 2) angl <- create_anglemania_object(   se,   dataset_key = \"Dataset\",   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> Using dataset_key: Dataset #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 156 #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s angl #> anglemania_object #> -------------- #> Dataset key: Dataset  #> Batch key: groups  #> Number of datasets: 2  #> Datasets: c(\"A\", \"B\")  #> Total number of batches: 4  #> Batches (showing first 5): #> c(\"A:g2\", \"A:g1\", \"B:g1\", \"B:g2\")  #> Number of intersected genes: 156  #> Intersected genes (showing first 10): #> CD79B, HLA-DRA, HLA-DQB1, HVCN1, HLA-DMB, LTB, EAF2, FAM96A, CXCR4, NT5C , ... #> Min cells per gene: 1"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Summary Information for an anglemania_object — show,anglemania_object-method","title":"Display Summary Information for an anglemania_object — show,anglemania_object-method","text":"method provides concise summary anglemania_object, including dataset batch information, number intersected genes, relevant details. Retrieves list gene expression matrices stored anglemania_object object. Assigns new list gene expression matrices anglemania_object. Retrieves dataset key used anglemania_object. Retrieves batch key used anglemania_object. Retrieves data frame summarizing selected anglemania gene pairs anglemania_object. Retrieves weights assigned dataset batch anglemania_object Assigns new weights datasets batches anglemania_object. Retrieves list statistical measures computed across datasets anglemania_object. Assigns new list statistical measures anglemania_object. Retrieves vector genes expressed least specified number cells across batches. Assigns new vector intersected genes anglemania_object. Retrieves list genes selected integration anglemania_object function adds unique batch identifier metadata Seurat object combining specified dataset batch keys. useful distinguishing samples integration analysis.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Summary Information for an anglemania_object — show,anglemania_object-method","text":"","code":"# S4 method for class 'anglemania_object' show(object)  matrix_list(object)  # S4 method for class 'anglemania_object' matrix_list(object)  matrix_list(object) <- value  # S4 method for class 'anglemania_object' matrix_list(object) <- value  dataset_key(object)  # S4 method for class 'anglemania_object' dataset_key(object)  batch_key(object)  # S4 method for class 'anglemania_object' batch_key(object)  data_info(object)  # S4 method for class 'anglemania_object' data_info(object)  angl_weights(object)  # S4 method for class 'anglemania_object' angl_weights(object)  angl_weights(object) <- value  # S4 method for class 'anglemania_object' angl_weights(object) <- value  list_stats(object)  # S4 method for class 'anglemania_object' list_stats(object)  list_stats(object) <- value  # S4 method for class 'anglemania_object' list_stats(object) <- value  intersect_genes(object)  # S4 method for class 'anglemania_object' intersect_genes(object)  intersect_genes(object) <- value  # S4 method for class 'anglemania_object' intersect_genes(object) <- value  get_anglemania_genes(object)  # S4 method for class 'anglemania_object' get_anglemania_genes(object)  add_unique_batch_key(   seurat_object,   dataset_key = NA_character_,   batch_key,   new_unique_batch_key = \"batch\" )"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Summary Information for an anglemania_object — show,anglemania_object-method","text":"object anglemania_object. value character vector gene names. seurat_object Seurat object. dataset_key character string specifying column name metadata identifies dataset. NA, batch_key used. batch_key character string specifying column name metadata identifies batch. new_unique_batch_key character string new unique batch key added metadata. Default \"batch\".","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Summary Information for an anglemania_object — show,anglemania_object-method","text":"Prints summary console. list FBM objects containing gene expression matrices. updated anglemania_object. character string representing dataset key. character string representing batch key. data frame containing dataset batch information. named numeric vector weights. updated anglemania_object. list containing statistical matrices mean z-scores SNR z-scores updated anglemania_object. character vector intersected gene names multiple Seurat objects. updated anglemania_object object. character vector integration gene names. Seurat object additional metadata column containing unique batch key.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-methods.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Display Summary Information for an anglemania_object — show,anglemania_object-method","text":"show(anglemania_object): show anglemania_object info matrix_list(): Access matrix list matrix_list(object) <- value: set matrix list anglemania_object dataset_key(): Access dataset key anglemania_object batch_key(): Access batch key anglemania_object data_info(): Access info selected gene pairs angl_weights(): Access weights angl_weights(object) <- value: Set weights list_stats(): Access statistics gene-gene matrices list_stats(object) <- value: Set statistics gene-gene matrices intersect_genes(): Access intersection genes batches intersect_genes(object) <- value: Set intersection genes batches get_anglemania_genes(): Access genes extracted anglemania add_unique_batch_key(): Temporarily add unique batch key dataset","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/anglemania_object-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Summary Information for an anglemania_object — show,anglemania_object-method","text":"","code":"se <- SeuratObject::pbmc_small angl <- create_anglemania_object(se, batch_key = \"groups\") #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s angl <- anglemania(angl) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features... show(angl) #> anglemania_object #> -------------- #> Dataset key: NA  #> Batch key: groups  #> Number of datasets: 1  #> Total number of batches: 2  #> Batches (showing first 5): #> g2, g1  #> Number of intersected genes: 228  #> Intersected genes (showing first 10): #> MS4A1, CD79B, CD79A, HLA-DRA, TCL1A, HLA-DQB1, HVCN1, HLA-DMB, LTB, LINC00926 , ... #> Min cells per gene: 1  se <- SeuratObject::pbmc_small angl <- create_anglemania_object(se, batch_key = \"groups\") #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s angl <- anglemania(angl) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features... str(matrix_list(angl)) #> List of 2 #>  $ g1:Reference class 'FBM' [package \"bigstatsr\"] with 15 fields #>   ..$ extptr      :<externalptr>  #>   ..$ extptr_rw   :<externalptr>  #>   ..$ nrow        : int 228 #>   ..$ ncol        : int 228 #>   ..$ type        : Named int 8 #>   .. ..- attr(*, \"names\")= chr \"double\" #>   ..$ backingfile : chr \"/tmp/Rtmpb1qOQN/file170928707d7a.bk\" #>   ..$ is_read_only: logi FALSE #>   ..$ address     :<externalptr>  #>   ..$ address_rw  :<externalptr>  #>   ..$ bk          : chr \"/tmp/Rtmpb1qOQN/file170928707d7a.bk\" #>   ..$ rds         : chr \"/tmp/Rtmpb1qOQN/file170928707d7a.rds\" #>   ..$ is_saved    : logi FALSE #>   ..$ type_chr    : chr \"double\" #>   ..$ type_size   : int 8 #>   ..$ file_size   : num 415872 #>   ..and 22 methods, of which 8 are  possibly relevant: #>   ..  add_columns, bm, bm.desc, check_dimensions, check_write_permissions, #>   ..  initialize, save, show#envRefClass #>  $ g2:Reference class 'FBM' [package \"bigstatsr\"] with 15 fields #>   ..$ extptr      :<externalptr>  #>   ..$ extptr_rw   :<externalptr>  #>   ..$ nrow        : int 228 #>   ..$ ncol        : int 228 #>   ..$ type        : Named int 8 #>   .. ..- attr(*, \"names\")= chr \"double\" #>   ..$ backingfile : chr \"/tmp/Rtmpb1qOQN/file1709dda5d42.bk\" #>   ..$ is_read_only: logi FALSE #>   ..$ address     :<externalptr>  #>   ..$ address_rw  :<externalptr>  #>   ..$ bk          : chr \"/tmp/Rtmpb1qOQN/file1709dda5d42.bk\" #>   ..$ rds         : chr \"/tmp/Rtmpb1qOQN/file1709dda5d42.rds\" #>   ..$ is_saved    : logi FALSE #>   ..$ type_chr    : chr \"double\" #>   ..$ type_size   : int 8 #>   ..$ file_size   : num 415872 #>   ..and 22 methods, of which 8 are  possibly relevant: #>   ..  add_columns, bm, bm.desc, check_dimensions, check_write_permissions, #>   ..  initialize, save, show#envRefClass se <- SeuratObject::pbmc_small se[[]]$Dataset <- rep(c(\"A\", \"B\"), each = ncol(se) / 2) angl <- create_anglemania_object(   se,   dataset_key = \"Dataset\",   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> Using dataset_key: Dataset #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 156 #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s dataset_key(angl) #> [1] \"Dataset\" se <- SeuratObject::pbmc_small angl <- create_anglemania_object(   se,   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s batch_key(angl) #> [1] \"groups\" se <- SeuratObject::pbmc_small angl <- create_anglemania_object(   se,   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s batch_key(angl) #> [1] \"groups\" se <- SeuratObject::pbmc_small angl <- create_anglemania_object(   se,   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s batch_key(angl) #> [1] \"groups\" angl_weights(angl) #>  g2  g1  #> 0.5 0.5  se <- SeuratObject::pbmc_small angl <- create_anglemania_object(   se,   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s angl <- anglemania(angl) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=01s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features... stats <- list_stats(angl) str(stats) #> List of 3 #>  $ mean_zscore: num [1:228, 1:228] NA 4.02 4.88 2.85 4.48 ... #>  $ sds_zscore : num [1:228, 1:228] NA 0.601 0.21 0.461 0.86 ... #>  $ sn_zscore  : num [1:228, 1:228] NA 6.69 23.19 6.17 5.21 ...  se <- SeuratObject::pbmc_small angl <- create_anglemania_object(   se,   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s intersect_genes(anglorf75\"      \"RARRES3\"       #> [225] \"PCMT1\"         \"LAMP1\"         \"SPON2\"         \"S100B\"         se <- SeuratObject::pbmc_small angl <- create_anglemania_object(   se,   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s angl <- anglemania(angl) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features... # extract the genes identified by anglemania() anglemania_genes <- get_anglemania_genes(angl)  se <- SeuratObject::pbmc_small se[[]]$Dataset <- rep(c(\"A\", \"B\"), each = ncol(se)/2) se <- add_unique_batch_key(   seurat_object = se,   dataset_key = \"Dataset\",   batch_key = \"groups\",   new_unique_batch_key = \"batch\"    ) head(se[[]]) #>                   orig.ident nCount_RNA nFeature_RNA RNA_snn_res.0.8 #> ATGCCAGAACGACT SeuratProject         70           47               0 #> CATGGCCTGTGCAT SeuratProject         85           52               0 #> GAACCTGATGAACC SeuratProject         87           50               1 #> TGACTGGATTCTCA SeuratProject        127           56               0 #> AGTCAGACTGCACA SeuratProject        173           53               0 #> TCTGATACACGTGT SeuratProject         70           48               0 #>                letter.idents groups RNA_snn_res.1 Dataset batch #> ATGCCAGAACGACT             A     g2             0       A  A:g2 #> CATGGCCTGTGCAT             A     g1             0       A  A:g1 #> GAACCTGATGAACC             B     g2             0       A  A:g2 #> TGACTGGATTCTCA             A     g2             0       A  A:g2 #> AGTCAGACTGCACA             A     g2             0       A  A:g2 #> TCTGATACACGTGT             A     g1             0       A  A:g1"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/big_mat_list_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the mean for each element of a matrix from a list of FBMs — big_mat_list_mean","title":"Calculates the mean for each element of a matrix from a list of FBMs — big_mat_list_mean","text":"function takes anglemania_object containing list FBMs calculates mean every element. list empty FBMs different dimensions, throws error.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/big_mat_list_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the mean for each element of a matrix from a list of FBMs — big_mat_list_mean","text":"","code":"big_mat_list_mean(angl)"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/big_mat_list_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the mean for each element of a matrix from a list of FBMs — big_mat_list_mean","text":"angl anglemania_object containing list FBMs. case, FBMs angle matrices computed factorise.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/big_mat_list_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the mean for each element of a matrix from a list of FBMs — big_mat_list_mean","text":"new FBM object containing mean values.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/big_mat_list_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the mean for each element of a matrix from a list of FBMs — big_mat_list_mean","text":"","code":"# Create FBMs mat1 <- matrix(1:9, nrow = 3) mat2 <- matrix(1:9, nrow = 3)  fbm1 <- bigstatsr::FBM(nrow = nrow(mat1), ncol = ncol(mat1), init = mat1) fbm2 <- bigstatsr::FBM(nrow = nrow(mat2), ncol = ncol(mat2), init = mat2)  # Create weights weights <- c(batch1 = 0.5, batch2 = 0.5)  # Create the list of FBMs fbm_list <- list(batch1 = fbm1, batch2 = fbm2)  # Construct the anglemania_object angl <- new(   \"anglemania_object\",   weights = weights,   matrix_list = fbm_list ) big_mat_list_mean(angl) #> A Filebacked Big Matrix of type 'double' with 3 rows and 3 columns."},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/create_anglemania_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an anglemania_object from a Seurat Object — create_anglemania_object","title":"Create an anglemania_object from a Seurat Object — create_anglemania_object","text":"Constructs anglemania_object-class given Seurat object. includes extracting processing count matrices, filtering genes based expression minimum number cells, storing results along dataset batch information. also calculates weights dataset batch based number samples.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/create_anglemania_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an anglemania_object from a Seurat Object — create_anglemania_object","text":"","code":"create_anglemania_object(   seurat_object,   dataset_key = NA_character_,   batch_key,   min_cells_per_gene = 1 )"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/create_anglemania_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an anglemania_object from a Seurat Object — create_anglemania_object","text":"seurat_object Seurat object containing single-cell RNA-seq data. dataset_key character string indicating column name Seurat object metadata identifies dataset cell belongs. NA, cells assumed belong dataset. batch_key character string indicating column name(s) Seurat object metadata identify batch cell belongs. min_cells_per_gene numeric value indicating minimum number cells gene must expressed included analysis. Default 1.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/create_anglemania_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an anglemania_object from a Seurat Object — create_anglemania_object","text":"anglemania_object-class containing: matrix_list list filtered count matrices unique batch. dataset_key dataset key used splitting Seurat object. batch_key batch key used splitting Seurat object. data_info data frame summarizing number samples per dataset weights. weights numeric vector weights dataset batch based number samples. intersect_genes character vector genes expressed least specified number cells across batches. min_cells_per_gene minimum number cells per gene threshold used filtering.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/create_anglemania_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an anglemania_object from a Seurat Object — create_anglemania_object","text":"function performs following steps: Adds unique batch key Seurat object's metadata using add_unique_batch_key. Extracts count matrices batch. Filters genes based min_cells_per_gene threshold. Identifies intersected genes present across batches. Converts count matrices FBM objects. Computes weights batch dataset.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/create_anglemania_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an anglemania_object from a Seurat Object — create_anglemania_object","text":"","code":"se <- SeuratObject::pbmc_small angl <- create_anglemania_object(   se,   batch_key = \"groups\",   min_cells_per_gene = 1 ) #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s  angl #> anglemania_object #> -------------- #> Dataset key: NA  #> Batch key: groups  #> Number of datasets: 1  #> Total number of batches: 2  #> Batches (showing first 5): #> g2, g1  #> Number of intersected genes: 228  #> Intersected genes (showing first 10): #> MS4A1, CD79B, CD79A, HLA-DRA, TCL1A, HLA-DQB1, HVCN1, HLA-DMB, LTB, LINC00926 , ... #> Min cells per gene: 1"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_angles.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cosine angle between genes — extract_angles","title":"Calculate cosine angle between genes — extract_angles","text":"Constructs matrix gene-gene relationships based distance metrics.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_angles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cosine angle between genes — extract_angles","text":"","code":"extract_angles(x_mat, method = \"pearson\")"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_angles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cosine angle between genes — extract_angles","text":"x_mat FBM object containing raw gene expression data, rows correspond genes columns samples. data normalized scaled within function. method character string specifying method compute gene-gene relationships. Options : \"pearson\" (default): Computes cosine angle genes. \"spearman\": Computes Spearman rank correlation coefficient rank-transforming data computing correlation. \"diem\": Computes Dimension Insensitive Euclidean Metric genes. Note done factorise function.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_angles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cosine angle between genes — extract_angles","text":"FBM object containing gene-gene correlation matrix. matrix square dimensions equal number genes contains pairwise correlations genes. diagonal elements set NA.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_angles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate cosine angle between genes — extract_angles","text":"function returns gene-gene angle matrix FBM object.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_angles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate cosine angle between genes — extract_angles","text":"","code":"mat <- matrix(  c(      5, 3, 0, 0,      0, 0, 0, 3,      2, 1, 3, 4,      0, 0, 1, 0,      1, 2, 1, 2,      3, 4, 3, 4    ),    nrow = 6, # 6 genes    ncol = 4, # 4 cells    byrow = TRUE )  mat <- bigstatsr::FBM(nrow = nrow(mat), ncol = ncol(mat), init = mat)  angle_mat <- extract_angles(mat) angle_mat[] #>             [,1]       [,2]       [,3]       [,4]        [,5]       [,6] #> [1,]          NA -0.5769815 -0.8855700 -0.5769815 -0.08297916 -0.1231654 #> [2,] -0.57698151         NA  0.4087286 -0.3333333  0.23569456 -0.3202460 #> [3,] -0.88557002  0.4087286         NA  0.6315084 -0.38905020 -0.2197208 #> [4,] -0.57698151 -0.3333333  0.6315084         NA -0.17969901  0.4260250 #> [5,] -0.08297916  0.2356946 -0.3890502 -0.1796990          NA  0.7427533 #> [6,] -0.12316543 -0.3202460 -0.2197208  0.4260250  0.74275335         NA"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_rows_for_unique_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Unique Genes from Gene Pairs Data Frame — extract_rows_for_unique_genes","title":"Extract Unique Genes from Gene Pairs Data Frame — extract_rows_for_unique_genes","text":"Extracts unique gene identifiers data frame containing gene pairs returns vector genes specified maximum number.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_rows_for_unique_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Unique Genes from Gene Pairs Data Frame — extract_rows_for_unique_genes","text":"","code":"extract_rows_for_unique_genes(dt, max_n_genes)"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_rows_for_unique_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Unique Genes from Gene Pairs Data Frame — extract_rows_for_unique_genes","text":"dt data frame containing gene pairs, columns geneA geneB. max_n_genes integer specifying maximum number unique genes return.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_rows_for_unique_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Unique Genes from Gene Pairs Data Frame — extract_rows_for_unique_genes","text":"vector unique gene identifiers.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_rows_for_unique_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Unique Genes from Gene Pairs Data Frame — extract_rows_for_unique_genes","text":"function combines geneA geneB columns, extracts unique gene names, returns first max_n_genes genes. max_n_genes exceeds number unique genes available, unique genes returned.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/extract_rows_for_unique_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Unique Genes from Gene Pairs Data Frame — extract_rows_for_unique_genes","text":"","code":"gene_pairs <- data.frame(   geneA = c(\"Gene1\", \"Gene2\", \"Gene3\", \"Gene4\"),   geneB = c(\"Gene3\", \"Gene4\", \"Gene5\", \"Gene6\") ) unique_genes <- extract_rows_for_unique_genes(   gene_pairs,   max_n_genes = 3 ) print(unique_genes) #> [1] \"Gene1\" \"Gene3\" \"Gene2\""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/factorise.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorize Angle Matrices into Z-Scores — factorise","title":"Factorize Angle Matrices into Z-Scores — factorise","text":"factorise computes angle matrix input gene expression matrix using specified method, performs permutation create null distribution, transforms correlations z-scores. function optimized large datasets using bigstatsr package.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/factorise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorize Angle Matrices into Z-Scores — factorise","text":"","code":"factorise(x_mat, method = \"pearson\", seed = 1)"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/factorise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorize Angle Matrices into Z-Scores — factorise","text":"x_mat FBM object representing normalized scaled gene expression matrix. method character string specifying method calculating relationship gene pairs. Default \"pearson\". options include \"spearman\" \"diem\" (see https://bytez.com/docs/arxiv/2407.08623/paper). seed integer value setting seed reproducibility permutation. Default 1.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/factorise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorize Angle Matrices into Z-Scores — factorise","text":"FBM object containing z-score-transformed angle matrix.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/factorise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorize Angle Matrices into Z-Scores — factorise","text":"function performs following steps: Permutation: input matrix permuted column-wise disrupt existing angles, creating null distribution. Angle Computation: Computes angle matrix original permuted matrices using extract_angles. Method-Specific Processing: method = \"diem\", computes Euclidean distances scales angles accordingly, based methodology DIEM algorithm (https://bytez.com/docs/arxiv/2407.08623/paper). methods (\"pearson\", \"spearman\"), statistical measures computed permuted data. Statistical Measures: Calculates mean, variance, standard deviation using get_dstat. Z-Score Transformation: Transforms original angle matrix z-scores. process allows identification invariant gene-gene relationships comparing null distribution derived permuted data.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/factorise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorize Angle Matrices into Z-Scores — factorise","text":"","code":"mat <- matrix(  c(      5, 3, 0, 0,      0, 0, 0, 3,      2, 1, 3, 4,      0, 0, 1, 0,      1, 2, 1, 2,      3, 4, 3, 4    ),    nrow = 6, # 6 genes    ncol = 4, # 4 cells    byrow = TRUE )  mat <- bigstatsr::FBM(nrow = nrow(mat), ncol = ncol(mat), init = mat)  # Run factorise with method \"pearson\" and a fixed seed result_fbm <- factorise(mat, method = \"pearson\", seed = 1) result_fbm[] #>             [,1]       [,2]        [,3]        [,4]        [,5]        [,6] #> [1,]          NA -0.7562162 -1.32900007 -0.75621619  0.16072196  0.08613056 #> [2,] -0.75621619         NA  1.07340109 -0.30397076  0.75222541 -0.27967877 #> [3,] -1.32900007  1.0734011          NA  1.48691183 -0.40738914 -0.09308989 #> [4,] -0.75621619 -0.3039708  1.48691183          NA -0.01880374  1.10550559 #> [5,]  0.16072196  0.7522254 -0.40738914 -0.01880374          NA  1.69339816 #> [6,]  0.08613056 -0.2796788 -0.09308989  1.10550559  1.69339816          NA"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_dstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mean and standard deviation of the correlation matrix — get_dstat","title":"Compute mean and standard deviation of the correlation matrix — get_dstat","text":"Computes mean standard deviation correlation matrix using big_apply function.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_dstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mean and standard deviation of the correlation matrix — get_dstat","text":"","code":"get_dstat(corr_matrix)"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_dstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mean and standard deviation of the correlation matrix — get_dstat","text":"corr_matrix FBM object.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_dstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mean and standard deviation of the correlation matrix — get_dstat","text":"list statistical measures including mean, sd, var, sn, min, max.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_dstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute mean and standard deviation of the correlation matrix — get_dstat","text":"","code":"s_mat <- Matrix::rsparsematrix(nrow = 10, ncol = 5, density = 0.3) # Convert the sparse matrix to an FBM using your function fbm_mat <- sparse_to_fbm(s_mat) result <- get_dstat(fbm_mat) str(result) #> List of 6 #>  $ mean: num -0.105 #>  $ var : num 0.2 #>  $ sd  : num 0.447 #>  $ sn  : num -4.27 #>  $ min : num -2.3 #>  $ max : num 0.71 result #> $mean #> [1] -0.1046 #>  #> $var #> [1] 0.1998092 #>  #> $sd #> [1] 0.4470002 #>  #> $sn #> [1] -4.273425 #>  #> $min #> [1] -2.3 #>  #> $max #> [1] 0.71 #>"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_list_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistical measures from a list of FBMs — get_list_stats","title":"Calculate statistical measures from a list of FBMs — get_list_stats","text":"Computes mean, standard deviations, signal--noise ratio (SNR) element across list FBMs anglemania_object.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_list_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistical measures from a list of FBMs — get_list_stats","text":"","code":"get_list_stats(angl)"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_list_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistical measures from a list of FBMs — get_list_stats","text":"angl anglemania_object containing list FBMs.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_list_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate statistical measures from a list of FBMs — get_list_stats","text":"list containing three matrices: mean_zscore, sds_zscore, sn_zscore.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/get_list_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate statistical measures from a list of FBMs — get_list_stats","text":"","code":"se <- SeuratObject::pbmc_small angl <- create_anglemania_object(se, batch_key = \"groups\") #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s angl <- anglemania(angl) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features... list_stats(angl) <- get_list_stats(angl) #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... str(list_stats(angl)) #> List of 3 #>  $ mean_zscore: num [1:228, 1:228] NA 4.02 4.88 2.85 4.48 ... #>  $ sds_zscore : num [1:228, 1:228] NA 0.601 0.21 0.461 0.86 ... #>  $ sn_zscore  : num [1:228, 1:228] NA 6.69 23.19 6.17 5.21 ..."},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_by_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate Samples in a Seurat Object Using Selected Features from anglemania_object Object — integrate_by_features","title":"Integrate Samples in a Seurat Object Using Selected Features from anglemania_object Object — integrate_by_features","text":"integrate_by_features integrates samples batches within Seurat object using canonical correlation analysis (CCA) based set selected features (genes). function utilizes anglemania_object extract anglemania genes handles integration process, including optional downstream processing steps scaling, PCA, UMAP visualization.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_by_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate Samples in a Seurat Object Using Selected Features from anglemania_object Object — integrate_by_features","text":"","code":"integrate_by_features(   seurat_object,   angl,   int_order = NULL,   process = TRUE,   verbose = FALSE )"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_by_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate Samples in a Seurat Object Using Selected Features from anglemania_object Object — integrate_by_features","text":"seurat_object Seurat object containing samples batches integrated. angl anglemania_object-class previously generated using create_anglemania_object anglemania. important dataset_key batch_key correctly set anglemania_object. int_order optional data frame specifying integration order samples within Seurat list. See sample.tree argument IntegrateData details. provided, Seurat construct integration order using hierarchical clustering. Default NULL. process Logical value indicating whether process data integration (.e., scale , run PCA, compute UMAP embeddings). Default TRUE. verbose Logical value indicating whether display progress messages integration. Default FALSE.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_by_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrate Samples in a Seurat Object Using Selected Features from anglemania_object Object — integrate_by_features","text":"Seurat object containing integrated data. default assay set \"integrated\".","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_by_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrate Samples in a Seurat Object Using Selected Features from anglemania_object Object — integrate_by_features","text":"function performs following steps: Batch Key Addition: Adds unique batch key Seurat object's metadata distinguish different batches samples. Batch key set anglemania_object's batch_key. Splitting: Splits Seurat object list Seurat objects based batch key. Integration: Calls integrate_seurat_list integrate list Seurat objects using features extracted anglemania_object. integration performed using Seurat's CCA-based methods, parameters adjusted based smallest dataset ensure compatibility small sample sizes (e.g., metacells SEACells). process = TRUE, function also scale data, run PCA, compute UMAP embeddings.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_by_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrate Samples in a Seurat Object Using Selected Features from anglemania_object Object — integrate_by_features","text":"","code":"# Integrate samples using anglemania_object  # Automatically reads the batch key from anglemania_object #  splits the seurat object into batches and integrates them #  using CCA integration and anglemania genes previously extracted #  with anglemania() or select_genes() se <- SeuratObject::pbmc_small angl <- create_anglemania_object(se, batch_key = \"groups\") #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s angl <- anglemania(angl) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features... options(future.globals.maxSize = 4000 * 1024^2) integrated_object <- integrate_by_features(se, angl) #> Log normalizing data... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Finding integration anchors... #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=01s, remaining~00s #> Integrating samples... #> Warning: Layer counts isn't present in the assay object; returning NULL #> Running PCA with 30 PCs #> Running UMAP with 30 PCs and 10 neighbors #> Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric #> To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation' #> This message will be shown once per session"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_seurat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate a List of Seurat Objects Using Selected Features — integrate_seurat_list","title":"Integrate a List of Seurat Objects Using Selected Features — integrate_seurat_list","text":"integrate_seurat_list integrates list Seurat objects (e.g., representing different samples batches) using canonical correlation analysis (CCA) based set selected features (genes). function handles normalization, finding integration anchors, integrating data, optional downstream processing steps scaling, PCA, UMAP visualization.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_seurat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate a List of Seurat Objects Using Selected Features — integrate_seurat_list","text":"","code":"integrate_seurat_list(   seurat_list,   features,   int_order = NULL,   process = TRUE,   verbose = FALSE )"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_seurat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate a List of Seurat Objects Using Selected Features — integrate_seurat_list","text":"seurat_list list Seurat objects integrated. features character vector gene names (features) used integration. int_order optional data frame specifying integration order samples within Seurat list. See sample.tree argument IntegrateData details. provided, Seurat construct integration order using hierarchical clustering. Default NULL. process Logical value indicating whether process data integration (.e., scale , run PCA, compute UMAP embeddings). Default TRUE. verbose Logical value indicating whether display progress messages integration. Default FALSE.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_seurat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrate a List of Seurat Objects Using Selected Features — integrate_seurat_list","text":"Seurat object containing integrated data. default assay set \"integrated\".","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_seurat_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrate a List of Seurat Objects Using Selected Features — integrate_seurat_list","text":"function performs following steps: Normalization: Seurat object list log-normalized using NormalizeData. Parameter Adjustment: Integration parameters adjusted based smallest dataset accommodate cases small number cells (e.g., metacells). Finding Integration Anchors: Uses FindIntegrationAnchors find anchors datasets based provided features. Integration: Integrates datasets using IntegrateData. Optional Processing: process = TRUE, function scales data, runs PCA, computes UMAP embeddings. integration performed using Seurat's CCA-based methods, function designed handle datasets varying sizes efficiently.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/integrate_seurat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrate a List of Seurat Objects Using Selected Features — integrate_seurat_list","text":"","code":"if (FALSE) { # \\dontrun{ # Integrate a list of seurat object using selected  #  features (e.g. anglemania genes or HVGs) #  and CCA integration method seurat_list <- list(seurat_object1, seurat_object2) integrated_seurat <- integrate_seurat_list(seurat_list, features) } # }"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/select_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Genes Based on Statistical Thresholds from an anglemania_object — select_genes","title":"Select Genes Based on Statistical Thresholds from an anglemania_object — select_genes","text":"Selects genes anglemania_object-class based specified thresholds absolute mean z-score signal--noise ratio (SNR) z-score. updates integration_genes slot anglemania_object selected genes associated information.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/select_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Genes Based on Statistical Thresholds from an anglemania_object — select_genes","text":"","code":"select_genes(   angl,   zscore_mean_threshold = 2,   zscore_sn_threshold = 2,   max_n_genes = NULL )"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/select_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Genes Based on Statistical Thresholds from an anglemania_object — select_genes","text":"angl anglemania_object containing statistical matrices mean z-scores SNR z-scores. zscore_mean_threshold Numeric value specifying threshold absolute mean z-score. Default 2. zscore_sn_threshold Numeric value specifying threshold SNR z-score. Default 2. max_n_genes Integer specifying maximum number genes select. NULL, genes pass thresholds used. Default NULL.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/select_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Genes Based on Statistical Thresholds from an anglemania_object — select_genes","text":"input anglemania_object integration_genes slot updated include selected genes statistical information.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/select_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select Genes Based on Statistical Thresholds from an anglemania_object — select_genes","text":"function performs following steps: Checks input object class anglemania_object-class. max_n_genes specified, uses genes pass thresholds. Identifies gene pairs mean z-score SNR z-score exceed specified thresholds. gene pairs meet criteria, adjusts thresholds 99th percentile values corresponding statistics re-selects. Extracts unique genes selected gene pairs using extract_rows_for_unique_genes. Updates integration_genes slot anglemania_object selected genes statistics.","code":""},{"path":[]},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/select_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Genes Based on Statistical Thresholds from an anglemania_object — select_genes","text":"","code":"se <- SeuratObject::pbmc_small angl <- create_anglemania_object(se, batch_key = \"groups\") #> No dataset_key specified. #> Assuming that all samples belong to the same dataset and are separated by batch_key: groups #> Extracting count matrices... #> Filtering each batch to at least 1 cells per gene... #> Using the intersection of filtered genes from all batches... #> Number of genes in intersected set: 228 #>    |                                                  | 0 % elapsed=00s      |==================================================| 100% elapsed=00s, remaining~00s angl <- anglemania(angl) #> Computing angles and transforming to z-scores... #>    |                                                  | 0 % elapsed=00s      |=========================                         | 50% elapsed=00s, remaining~00s   |==================================================| 100% elapsed=00s, remaining~00s #> Computing statistics... #> Weighting matrix_list... #> Calculating mean... #> Calculating sds... #> Filtering features... angl <- select_genes(angl,                       zscore_mean_threshold = 2.5,                      zscore_sn_threshold = 2.5,                      max_n_genes = 2000) anglemania_genes <- get_anglemania_genes(angl) # View the selected genes and use for integration"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/sparse_to_fbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a sparse matrix into a file-backed matrix (FBM) — sparse_to_fbm","title":"Convert a sparse matrix into a file-backed matrix (FBM) — sparse_to_fbm","text":"Converts sparse matrix FBM efficient memory usage.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/sparse_to_fbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a sparse matrix into a file-backed matrix (FBM) — sparse_to_fbm","text":"","code":"sparse_to_fbm(s_mat)"},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/sparse_to_fbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a sparse matrix into a file-backed matrix (FBM) — sparse_to_fbm","text":"s_mat sparse matrix.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/sparse_to_fbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a sparse matrix into a file-backed matrix (FBM) — sparse_to_fbm","text":"FBM object bigstatsr package.","code":""},{"path":"http://bioinformatics.mdc-berlin.de/anglemania/reference/sparse_to_fbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a sparse matrix into a file-backed matrix (FBM) — sparse_to_fbm","text":"","code":"s_mat <- Matrix::rsparsematrix(nrow = 10, ncol = 5, density = 0.3) # Convert the sparse matrix to an FBM using your function fbm_mat <- sparse_to_fbm(s_mat) fbm_mat #> A Filebacked Big Matrix of type 'double' with 10 rows and 5 columns."}]
